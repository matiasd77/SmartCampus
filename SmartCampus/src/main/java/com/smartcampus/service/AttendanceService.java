package com.smartcampus.service;

import com.smartcampus.dto.AttendanceDTO;
import com.smartcampus.entity.AttendanceStatus;

import java.time.LocalDate;
import java.util.List;

public interface AttendanceService {
    List<AttendanceDTO> getAllAttendance();
    AttendanceDTO getAttendanceById(Long id);
    AttendanceDTO getAttendanceByStudentAndCourseAndDate(Long studentId, Long courseId, LocalDate date);
    AttendanceDTO createAttendance(AttendanceDTO attendanceDTO);
    AttendanceDTO updateAttendance(Long id, AttendanceDTO attendanceDTO);
    void deleteAttendance(Long id);
    List<AttendanceDTO> getAttendanceByStudentId(Long studentId);
    List<AttendanceDTO> getAttendanceByCourseId(Long courseId);
    List<AttendanceDTO> getAttendanceByProfessorId(Long professorId);
    List<AttendanceDTO> getAttendanceByStudentIdAndCourseId(Long studentId, Long courseId);
    List<AttendanceDTO> getAttendanceByStatus(AttendanceStatus status);
    List<AttendanceDTO> getAttendanceByStudentIdAndStatus(Long studentId, AttendanceStatus status);
    List<AttendanceDTO> getAttendanceByCourseIdAndStatus(Long courseId, AttendanceStatus status);
    List<AttendanceDTO> getAttendanceByProfessorIdAndStatus(Long professorId, AttendanceStatus status);
    List<AttendanceDTO> getAttendanceByStudentIdAndSemester(Long studentId, String semester, Integer academicYear);
    List<AttendanceDTO> getAttendanceByProfessorIdAndSemester(Long professorId, String semester, Integer academicYear);
    List<AttendanceDTO> getAttendanceByDate(LocalDate date);
    List<AttendanceDTO> getAttendanceByStudentIdAndDate(Long studentId, LocalDate date);
    List<AttendanceDTO> getAttendanceByCourseIdAndDate(Long courseId, LocalDate date);
    List<AttendanceDTO> getAttendanceByProfessorIdAndDate(Long professorId, LocalDate date);
    List<AttendanceDTO> getAttendanceByDateRange(LocalDate startDate, LocalDate endDate);
    List<AttendanceDTO> getAttendanceByStudentIdAndDateRange(Long studentId, LocalDate startDate, LocalDate endDate);
    List<AttendanceDTO> getAttendanceByCourseIdAndDateRange(Long courseId, LocalDate startDate, LocalDate endDate);
    List<AttendanceDTO> getAttendanceByProfessorIdAndDateRange(Long professorId, LocalDate startDate, LocalDate endDate);
    List<AttendanceDTO> getAttendanceByIsMakeup(Boolean isMakeup);
    List<AttendanceDTO> getAttendanceByStudentIdAndIsMakeup(Long studentId, Boolean isMakeup);
    List<AttendanceDTO> getAttendanceByCourseIdAndIsMakeup(Long courseId, Boolean isMakeup);
    List<AttendanceDTO> getAttendanceByIsVerified(Boolean isVerified);
    List<AttendanceDTO> getAttendanceByStudentIdAndIsVerified(Long studentId, Boolean isVerified);
    List<AttendanceDTO> getAttendanceByCourseIdAndIsVerified(Long courseId, Boolean isVerified);
    List<AttendanceDTO> getAttendanceByIsExcused(Boolean isExcused);
    List<AttendanceDTO> getAttendanceByStudentIdAndIsExcused(Long studentId, Boolean isExcused);
    List<AttendanceDTO> getAttendanceByCourseIdAndIsExcused(Long courseId, Boolean isExcused);
    List<AttendanceDTO> getLateAttendances();
    List<AttendanceDTO> getLateAttendancesByStudentId(Long studentId);
    List<AttendanceDTO> getLateAttendancesByCourseId(Long courseId);
    List<AttendanceDTO> getEarlyDepartureAttendances();
    List<AttendanceDTO> getEarlyDepartureAttendancesByStudentId(Long studentId);
    List<AttendanceDTO> getEarlyDepartureAttendancesByCourseId(Long courseId);
    List<AttendanceDTO> getActiveCheckIns();
    List<AttendanceDTO> getActiveCheckInsByStudentId(Long studentId);
    List<AttendanceDTO> getActiveCheckInsByCourseId(Long courseId);
    Long getAttendanceCountByStudentId(Long studentId);
    Long getAttendanceCountByCourseId(Long courseId);
    Long getAttendanceCountByProfessorId(Long professorId);
    Long getAttendanceCountByStudentIdAndStatus(Long studentId, AttendanceStatus status);
    Long getAttendanceCountByCourseIdAndStatus(Long courseId, AttendanceStatus status);
    Long getAttendanceCountByProfessorIdAndStatus(Long professorId, AttendanceStatus status);
    Long getPresentCountByStudentId(Long studentId);
    Long getPresentCountByCourseId(Long courseId);
    Long getPresentCountByProfessorId(Long professorId);
    Long getAbsentCountByStudentId(Long studentId);
    Long getAbsentCountByCourseId(Long courseId);
    Long getAbsentCountByProfessorId(Long professorId);
    Long getExcusedCountByStudentId(Long studentId);
    Long getExcusedCountByCourseId(Long courseId);
    Long getExcusedCountByProfessorId(Long professorId);
    Double getAverageAttendancePercentageByStudentId(Long studentId);
    Double getAverageAttendancePercentageByCourseId(Long courseId);
    Double getAverageAttendancePercentageByProfessorId(Long professorId);
    Double getMaxAttendancePercentageByStudentId(Long studentId);
    Double getMinAttendancePercentageByStudentId(Long studentId);
    Double getMaxAttendancePercentageByCourseId(Long courseId);
    Double getMinAttendancePercentageByCourseId(Long courseId);
    boolean existsByStudentIdAndCourseIdAndDate(Long studentId, Long courseId, LocalDate date);
} 
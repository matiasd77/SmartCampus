package com.smartcampus.service;

import com.smartcampus.dto.NotificationDTO;
import com.smartcampus.entity.NotificationPriority;
import com.smartcampus.entity.NotificationType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.time.LocalDateTime;
import java.util.List;

public interface NotificationService {
    List<NotificationDTO> getAllNotifications();
    Page<NotificationDTO> getAllNotificationsPaginated(Pageable pageable);
    NotificationDTO getNotificationById(Long id);
    NotificationDTO createNotification(NotificationDTO notificationDTO);
    NotificationDTO updateNotification(Long id, NotificationDTO notificationDTO);
    void deleteNotification(Long id);
    List<NotificationDTO> getNotificationsByUserId(Long userId);
    Page<NotificationDTO> getNotificationsByUserIdPaginated(Long userId, Pageable pageable);
    List<NotificationDTO> getNotificationsByUserIdAndIsRead(Long userId, Boolean isRead);
    Page<NotificationDTO> getNotificationsByUserIdAndIsReadPaginated(Long userId, Boolean isRead, Pageable pageable);
    List<NotificationDTO> getNotificationsByUserIdAndType(Long userId, NotificationType type);
    List<NotificationDTO> getNotificationsByUserIdAndPriority(Long userId, NotificationPriority priority);
    List<NotificationDTO> getNotificationsByUserIdAndIsUrgent(Long userId, Boolean isUrgent);
    List<NotificationDTO> getNotificationsByUserIdAndIsArchived(Long userId, Boolean isArchived);
    List<NotificationDTO> getNotificationsByUserIdAndIsSystem(Long userId, Boolean isSystem);
    List<NotificationDTO> getNotificationsByUserIdAndIsBroadcast(Long userId, Boolean isBroadcast);
    List<NotificationDTO> getNotificationsByUserIdAndIsScheduled(Long userId, Boolean isScheduled);
    List<NotificationDTO> getNotificationsByUserIdAndIsSent(Long userId, Boolean isSent);
    List<NotificationDTO> getNotificationsByUserIdAndCategory(Long userId, String category);
    List<NotificationDTO> getNotificationsByUserIdAndSource(Long userId, String source);
    List<NotificationDTO> getNotificationsByUserIdAndCreatedAtSince(Long userId, LocalDateTime since);
    List<NotificationDTO> getNotificationsByUserIdAndCreatedAtBetween(Long userId, LocalDateTime startDate, LocalDateTime endDate);
    List<NotificationDTO> getNotificationsByUserIdAndReadAtBetween(Long userId, LocalDateTime startDate, LocalDateTime endDate);
    List<NotificationDTO> getNotificationsByUserIdAndKeyword(Long userId, String keyword);
    List<NotificationDTO> getExpiredNotificationsByUserId(Long userId);
    List<NotificationDTO> getNonExpiredNotificationsByUserId(Long userId);
    List<NotificationDTO> getScheduledForSendingNotificationsByUserId(Long userId);
    List<NotificationDTO> getExpiredRecurringNotificationsByUserId(Long userId);
    List<NotificationDTO> getNotificationsByUserIdAndDeliveryStatus(Long userId, String deliveryStatus);
    List<NotificationDTO> getNotificationsByUserIdAndDeliveryMethod(Long userId, String deliveryMethod);
    List<NotificationDTO> getReadyForRetryNotificationsByUserId(Long userId);
    List<NotificationDTO> getNotificationsByIsRead(Boolean isRead);
    List<NotificationDTO> getNotificationsByType(NotificationType type);
    List<NotificationDTO> getNotificationsByPriority(NotificationPriority priority);
    List<NotificationDTO> getNotificationsByIsUrgent(Boolean isUrgent);
    List<NotificationDTO> getNotificationsByIsArchived(Boolean isArchived);
    List<NotificationDTO> getNotificationsByIsSystem(Boolean isSystem);
    List<NotificationDTO> getNotificationsByIsBroadcast(Boolean isBroadcast);
    List<NotificationDTO> getNotificationsByIsScheduled(Boolean isScheduled);
    List<NotificationDTO> getNotificationsByIsSent(Boolean isSent);
    List<NotificationDTO> getNotificationsByCategory(String category);
    List<NotificationDTO> getNotificationsBySource(String source);
    List<NotificationDTO> getNotificationsByCreatedAtSince(LocalDateTime since);
    List<NotificationDTO> getNotificationsByCreatedAtBetween(LocalDateTime startDate, LocalDateTime endDate);
    List<NotificationDTO> getNotificationsByReadAtBetween(LocalDateTime startDate, LocalDateTime endDate);
    List<NotificationDTO> getNotificationsByKeyword(String keyword);
    List<NotificationDTO> getExpiredNotifications();
    List<NotificationDTO> getNonExpiredNotifications();
    List<NotificationDTO> getScheduledForSendingNotifications();
    List<NotificationDTO> getExpiredRecurringNotifications();
    List<NotificationDTO> getNotificationsByDeliveryStatus(String deliveryStatus);
    List<NotificationDTO> getNotificationsByDeliveryMethod(String deliveryMethod);
    List<NotificationDTO> getReadyForRetryNotifications();
    List<NotificationDTO> getNotificationsByBroadcastTarget(String target);
    List<NotificationDTO> getNotificationsByBroadcastTargetContaining(String target);
    List<NotificationDTO> getAllTemplates();
    List<NotificationDTO> getNotificationsByTemplateName(String templateName);
    Long getNotificationCountByUserId(Long userId);
    Long getNotificationCountByUserIdAndIsRead(Long userId, Boolean isRead);
    Long getNotificationCountByUserIdAndType(Long userId, NotificationType type);
    Long getNotificationCountByUserIdAndPriority(Long userId, NotificationPriority priority);
    Long getNotificationCountByUserIdAndIsUrgent(Long userId, Boolean isUrgent);
    Long getNotificationCountByUserIdAndIsArchived(Long userId, Boolean isArchived);
    Long getNotificationCountByUserIdAndIsSystem(Long userId, Boolean isSystem);
    Long getNotificationCountByUserIdAndCategory(Long userId, String category);
    Long getNotificationCountByUserIdAndCreatedAtSince(Long userId, LocalDateTime since);
    Long getNonExpiredNotificationCountByUserId(Long userId);
    Long getNotificationCountByIsRead(Boolean isRead);
    Long getNotificationCountByType(NotificationType type);
    Long getNotificationCountByPriority(NotificationPriority priority);
    Long getNotificationCountByIsUrgent(Boolean isUrgent);
    Long getNotificationCountByIsArchived(Boolean isArchived);
    Long getNotificationCountByIsSystem(Boolean isSystem);
    Long getNotificationCountByIsBroadcast(Boolean isBroadcast);
    Long getNotificationCountByIsScheduled(Boolean isScheduled);
    Long getNotificationCountByIsSent(Boolean isSent);
    Long getNotificationCountByCategory(String category);
    Long getNotificationCountBySource(String source);
    Long getNotificationCountByCreatedAtSince(LocalDateTime since);
    Long getNonExpiredNotificationCount();
    Long getNotificationCountByDeliveryStatus(String deliveryStatus);
    Long getNotificationCountByDeliveryMethod(String deliveryMethod);
    Long getReadyForRetryNotificationCount();
    Long getNotificationCountByBroadcastTarget(String target);
    Long getTemplateCount();
    void markAsRead(Long notificationId, String readBy);
    void markAsUnread(Long notificationId);
    void markAllAsReadByUserId(Long userId, String readBy);
    void markAllAsUnreadByUserId(Long userId);
    void archiveNotification(Long notificationId, String archivedBy, String archiveReason);
    void unarchiveNotification(Long notificationId);
    void archiveAllByUserId(Long userId, String archivedBy, String archiveReason);
    void unarchiveAllByUserId(Long userId);
    void markAsSent(Long notificationId, String sentBy);
    void incrementRetryCount(Long notificationId);
    void setNextRetryDate(Long notificationId, LocalDateTime nextRetryDate);
    void sendNotificationToUser(Long userId, NotificationDTO notificationDTO);
    void sendNotificationToUsers(List<Long> userIds, NotificationDTO notificationDTO);
    void sendBroadcastNotification(NotificationDTO notificationDTO, String target);
    void sendSystemNotification(Long userId, String message, NotificationType type, NotificationPriority priority);
    void sendSystemNotificationToUsers(List<Long> userIds, String message, NotificationType type, NotificationPriority priority);
    void sendSystemBroadcastNotification(String message, NotificationType type, NotificationPriority priority, String target);
    void scheduleNotification(Long userId, NotificationDTO notificationDTO, LocalDateTime scheduledDate);
    void scheduleBroadcastNotification(NotificationDTO notificationDTO, String target, LocalDateTime scheduledDate);
    void cancelScheduledNotification(Long notificationId);
    void processScheduledNotifications();
    void processRecurringNotifications();
    void processRetryNotifications();
    void cleanupExpiredNotifications();
    void cleanupOldNotifications(int daysToKeep);
    void deleteTestNotifications();
} 
package com.smartcampus.service;

import com.smartcampus.dto.AnnouncementDTO;
import com.smartcampus.entity.AnnouncementPriority;
import com.smartcampus.entity.AnnouncementStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.time.LocalDateTime;
import java.util.List;

public interface AnnouncementService {
    List<AnnouncementDTO> getAllAnnouncements();
    Page<AnnouncementDTO> getAllAnnouncementsPaginated(Pageable pageable);
    AnnouncementDTO getAnnouncementById(Long id);
    AnnouncementDTO createAnnouncement(AnnouncementDTO announcementDTO);
    AnnouncementDTO updateAnnouncement(Long id, AnnouncementDTO announcementDTO);
    void deleteAnnouncement(Long id);
    List<AnnouncementDTO> getAnnouncementsByCourseId(Long courseId);
    Page<AnnouncementDTO> getAnnouncementsByCourseIdPaginated(Long courseId, Pageable pageable);
    List<AnnouncementDTO> getAnnouncementsByPostedById(Long postedById);
    Page<AnnouncementDTO> getAnnouncementsByPostedByIdPaginated(Long postedById, Pageable pageable);
    List<AnnouncementDTO> getAnnouncementsByStatus(AnnouncementStatus status);
    Page<AnnouncementDTO> getAnnouncementsByStatusPaginated(AnnouncementStatus status, Pageable pageable);
    List<AnnouncementDTO> getAnnouncementsByPriority(AnnouncementPriority priority);
    Page<AnnouncementDTO> getAnnouncementsByPriorityPaginated(AnnouncementPriority priority, Pageable pageable);
    List<AnnouncementDTO> getAnnouncementsByIsPinned(Boolean isPinned);
    Page<AnnouncementDTO> getAnnouncementsByIsPinnedPaginated(Boolean isPinned, Pageable pageable);
    List<AnnouncementDTO> getAnnouncementsByIsPublic(Boolean isPublic);
    Page<AnnouncementDTO> getAnnouncementsByIsPublicPaginated(Boolean isPublic, Pageable pageable);
    List<AnnouncementDTO> getAnnouncementsByIsUrgent(Boolean isUrgent);
    Page<AnnouncementDTO> getAnnouncementsByIsUrgentPaginated(Boolean isUrgent, Pageable pageable);
    List<AnnouncementDTO> getAnnouncementsByIsArchived(Boolean isArchived);
    Page<AnnouncementDTO> getAnnouncementsByIsArchivedPaginated(Boolean isArchived, Pageable pageable);
    List<AnnouncementDTO> getAnnouncementsByIsScheduled(Boolean isScheduled);
    List<AnnouncementDTO> getAnnouncementsByIsRecurring(Boolean isRecurring);
    List<AnnouncementDTO> getAnnouncementsByRequiresAcknowledgment(Boolean requiresAcknowledgment);
    List<AnnouncementDTO> getAnnouncementsByCourseIdAndStatus(Long courseId, AnnouncementStatus status);
    List<AnnouncementDTO> getAnnouncementsByPostedByIdAndStatus(Long postedById, AnnouncementStatus status);
    List<AnnouncementDTO> getAnnouncementsByCourseIdAndIsPinned(Long courseId, Boolean isPinned);
    List<AnnouncementDTO> getAnnouncementsByCourseIdAndIsUrgent(Long courseId, Boolean isUrgent);
    List<AnnouncementDTO> getAnnouncementsByCourseIdAndIsPublic(Long courseId, Boolean isPublic);
    List<AnnouncementDTO> getActiveAnnouncements();
    List<AnnouncementDTO> getActiveAnnouncementsByCourseId(Long courseId);
    List<AnnouncementDTO> getActivePublicAnnouncements();
    List<AnnouncementDTO> getActivePublicAnnouncementsByCourseId(Long courseId);
    List<AnnouncementDTO> getNonExpiredAnnouncements();
    List<AnnouncementDTO> getNonExpiredAnnouncementsByCourseId(Long courseId);
    List<AnnouncementDTO> getPublishedAnnouncements();
    List<AnnouncementDTO> getPublishedAnnouncementsByCourseId(Long courseId);
    List<AnnouncementDTO> getAnnouncementsByCreatedAtBetween(LocalDateTime startDate, LocalDateTime endDate);
    List<AnnouncementDTO> getAnnouncementsByCourseIdAndCreatedAtBetween(Long courseId, LocalDateTime startDate, LocalDateTime endDate);
    List<AnnouncementDTO> getAnnouncementsByPostedByIdAndCreatedAtBetween(Long postedById, LocalDateTime startDate, LocalDateTime endDate);
    List<AnnouncementDTO> getAnnouncementsByKeyword(String keyword);
    List<AnnouncementDTO> getAnnouncementsByCourseIdAndKeyword(Long courseId, String keyword);
    List<AnnouncementDTO> getAnnouncementsByTag(String tag);
    List<AnnouncementDTO> getAnnouncementsByCourseIdAndTag(Long courseId, String tag);
    List<AnnouncementDTO> getAnnouncementsByCategory(String category);
    List<AnnouncementDTO> getAnnouncementsByCourseIdAndCategory(Long courseId, String category);
    List<AnnouncementDTO> getAnnouncementsWithExpiredAcknowledgmentDeadline();
    List<AnnouncementDTO> getAnnouncementsWithExpiredAcknowledgmentDeadlineByCourseId(Long courseId);
    List<AnnouncementDTO> getAnnouncementsScheduledForPublishing();
    List<AnnouncementDTO> getExpiredRecurringAnnouncements();
    List<AnnouncementDTO> getExpiredRecurringAnnouncementsByCourseId(Long courseId);
    List<AnnouncementDTO> getAnnouncementsWithAttachments();
    List<AnnouncementDTO> getAnnouncementsWithAttachmentsByCourseId(Long courseId);
    List<AnnouncementDTO> getMostViewedAnnouncements();
    List<AnnouncementDTO> getMostViewedAnnouncementsByCourseId(Long courseId);
    List<AnnouncementDTO> getRecentAnnouncements(LocalDateTime since);
    List<AnnouncementDTO> getRecentAnnouncementsByCourseId(Long courseId, LocalDateTime since);
    List<AnnouncementDTO> getAnnouncementsBySemesterAndAcademicYear(String semester, Integer academicYear);
    List<AnnouncementDTO> getAnnouncementsByProfessorId(Long professorId);
    List<AnnouncementDTO> getActiveAnnouncementsByProfessorId(Long professorId);
    List<AnnouncementDTO> getAnnouncementsByDepartment(String department);
    List<AnnouncementDTO> getActiveAnnouncementsByDepartment(String department);
    Long getAnnouncementCountByCourseId(Long courseId);
    Long getAnnouncementCountByPostedById(Long postedById);
    Long getAnnouncementCountByProfessorId(Long professorId);
    Long getAnnouncementCountByStatus(AnnouncementStatus status);
    Long getAnnouncementCountByPriority(AnnouncementPriority priority);
    Long getActiveAnnouncementCount();
    Long getActiveAnnouncementCountByCourseId(Long courseId);
    Long getActivePublicAnnouncementCount();
    Long getActivePublicAnnouncementCountByCourseId(Long courseId);
    Long getUrgentAnnouncementCount();
    Long getUrgentAnnouncementCountByCourseId(Long courseId);
    Long getPinnedAnnouncementCount();
    Long getPinnedAnnouncementCountByCourseId(Long courseId);
    void incrementViewCount(Long announcementId);
    void archiveAnnouncement(Long announcementId, String archivedBy, String archiveReason);
    void unarchiveAnnouncement(Long announcementId);
    void pinAnnouncement(Long announcementId);
    void unpinAnnouncement(Long announcementId);
    void markAsUrgent(Long announcementId);
    void unmarkAsUrgent(Long announcementId);
    void publishAnnouncement(Long announcementId);
    void unpublishAnnouncement(Long announcementId);
    void scheduleAnnouncement(Long announcementId, LocalDateTime scheduledDate);
    void unscheduleAnnouncement(Long announcementId);
} 